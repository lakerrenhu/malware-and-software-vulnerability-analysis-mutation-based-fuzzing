#include <string>
#include <fstream>
#include <sstream>
#include <iostream>

#include <iterator>
#include <algorithm>
#include <vector>
#include <stdio.h>
#include <bits/stdc++.h>
#include <cstdio>

#include <stdlib.h>
#include<sys/wait.h>
#include <unistd.h>
#include <sys/types.h>

using namespace std;

int main()
{
  FILE * pFile;
  long lSize;
  unsigned char buffer[808];
  size_t result;

  cout<< buffer<< "\n";

  pFile = fopen ( "cross.jpg" , "r+b" );
  if (pFile==NULL) {fputs ("File error",stderr); exit (1);}

  // obtain file size:
  fseek (pFile , 0 , SEEK_END);
  lSize = ftell (pFile);
  rewind (pFile);

  // store the whole file in buffer array:
 // buffer = ( char*) malloc (sizeof(char)*lSize);
  if (buffer == NULL) {fputs ("Memory error",stderr); exit (2);}

  // copy the file into the buffer:
  result = fread (&buffer,1,lSize,pFile);

  if (result != lSize) {fputs ("Reading error",stderr); exit (3);}

  /* the whole file is now loaded in the char array buffer. */
 // cout<<result <<"\n";
 // for (int j=0;j< 808;j++)
 // {
 //     int s= int(buffer[j]);
      // cout<< s<<"\t"; // see each byte in integer from ASCII char
 // }
  cout<< "\n";
  cout<< "\n";
  /*mutate buff and generate new image */

  int n=0; //crash count

  for (int k=0;k<1000;k++)
  {

  char filename[30];
  FILE *pf;
  int randpo[10];

  for (int i=0;i<10;i++)
  {
      randpo[i]=rand()%lSize;
      //cout<<randpo[i]<<"\t";
  }
 // int randpo=rand()%lSize;
  unsigned char tempbuff[808];

  for (int i=0;i<808;i++)
  {
      tempbuff[i] = buffer[i];
  }


  for (int i=0;i<10;i++)
  {
      tempbuff[randpo[i]]=rand()%256;
      //cout<< int(tempbuff[randpo[i]])<<"\n";
  }
  //tempbuff[randpo]=rand()%256;

//generate new test image

 pf=fopen("test.jpg","w+b");
 fwrite(&tempbuff,1,lSize,pf);
 fclose(pf);

 char commandbuf[200];
 sprintf(commandbuf,"./jpg2bmp test.jpg temp.bmp");
 int ret = system(commandbuf);

 //capture the exit code and check the abnormality
 int status;
 wait(&status);
 int retcode=WEXITSTATUS(ret);
 if (retcode==128+11 || retcode== 128+6)
 {
  n=n+1;
  cout<< n <<"\n";
  sprintf(filename,"crash-%d.jpg",n);
  pf=fopen(filename,"w+b");
  fwrite(&tempbuff,1,lSize,pf);
  fclose(pf);
 }
 //sprintf(filename,"crash-%d.JPG",k);
 //pf=fopen(filename,"w+b");
 //fwrite(&tempbuff,1,lSize,pf);
  }

  // terminate
  fclose (pFile);

  //free (buffer);
  return 0;
}
